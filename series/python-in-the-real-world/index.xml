<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python In The Real World on Arnav Khare</title>
    <link>http://arnavk.com/series/python-in-the-real-world/</link>
    <description>Recent content in Python In The Real World on Arnav Khare</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 15 Oct 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://arnavk.com/series/python-in-the-real-world/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Useful Executable Modules in the Python Standard Library</title>
      <link>http://arnavk.com/posts/python-executable-modules/</link>
      <pubDate>Sun, 15 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>http://arnavk.com/posts/python-executable-modules/</guid>
      <description>

&lt;p&gt;Python comes with many handy tools that can make our lives as developers or sysadmins easier. These tools are in the form of modules and libraries that are also executable. Many of these tools are known, but not all are as well known as they should be. I will mention a few useful tools that I have found in this post.&lt;/p&gt;

&lt;h2 id=&#34;how-to-write-an-executable-python-script&#34;&gt;How to write an executable Python script&lt;/h2&gt;

&lt;p&gt;First, for beginners, a quick introduction to how to write executable scripts in Python. It is actually really easy.&lt;/p&gt;

&lt;p&gt;We can simply run a python script from the command line by prepending &lt;code&gt;python&lt;/code&gt; to the name, such as &lt;code&gt;python &amp;lt;script&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To run a module which is present in the current PYTHONPATH, you can run from command-line too&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ python -m &amp;lt;module&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Adding &lt;code&gt;python -m&lt;/code&gt; to your script everytime can be tedious sometimes, so in Unix you can tell the shell how to execute your script. This is done by specifying the executing binary path in the first line of the script by appending &lt;code&gt;#!&lt;/code&gt; (aka &lt;a href=&#34;https://en.wikipedia.org/wiki/Shebang_(Unix)&#34;&gt;she-bang&lt;/a&gt;) to the command and then simply running the script.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;#!/usr/bin/python
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or better&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;#!/usr/bin/env python
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When Python executes a script it runs the code top-down line by line. All the functions and classes at the top level of the script will get compiled and any module level statements will be executed. This process is the same as when Python imports a module from another module.&lt;/p&gt;

&lt;p&gt;If you want to write code that &lt;strong&gt;only&lt;/strong&gt; executes when the module is run as a script, you can write it in a &lt;code&gt;if __name__ == &#39;__main__&#39;&lt;/code&gt; block as below.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;https://docs.python.org/3/library/argparse.html&#34;&gt;argparse&lt;/a&gt; module in stdlib can be used to parse command-line parameters and ensuring that the interface is clearly specified.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;import argparse

if __name__ == &#39;__main__&#39;:
    parser = argparse.ArgumentParser()
    parser.add_argument(&#39;-o&#39;, &#39;--output&#39;)
    parser.add_argument(&#39;-v&#39;, dest=&#39;verbose&#39;, action=&#39;store_true&#39;)
    args = parser.parse_args()
    # ... do something with args.output ...
    # ... do something with args.verbose ..
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let&amp;rsquo;s look at some interesting and useful runnable modules in the Python Standard Library&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;file-sharing&#34;&gt;File sharing&lt;/h2&gt;

&lt;p&gt;A very useful tool is the HTTP Server module. This module can be run to allow sharing of local file over your internal network easily using Python. To start a web server and serve files in current directory simply run the following command&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Python 3
$ python3 -m http.server

# Python 2
$ python2 -m SimpleHTTPServer
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now the files in local directory are it&amp;rsquo;s subdirectories are visible on &lt;code&gt;http://localhost:8000/&lt;/code&gt;. Others in the local network can access the files by replcating &lt;em&gt;localhost&lt;/em&gt; with our machine&amp;rsquo;s IP address.&lt;/p&gt;

&lt;p&gt;I have used this in the past to quickly share files with collegues where a file share was not readily available and the file is too big to send over email.&lt;/p&gt;

&lt;h2 id=&#34;json-pretty-printing&#34;&gt;JSON pretty printing&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.python.org/3/library/json.html#module-json.tool&#34;&gt;json.tool&lt;/a&gt; is a handy way of pretty printing and validating JSON format files from the command line.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ echo &#39;{&amp;quot;json&amp;quot;:&amp;quot;obj&amp;quot;}&#39; | python -m json.tool
{
    &amp;quot;json&amp;quot;: &amp;quot;obj&amp;quot;
}
$ echo &#39;{ 1.2:3.4}&#39; | python -m json.tool
Expecting property name enclosed in double quotes: line 1 column 3 (char 2)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I have used JSON tool in the past to debug integration with HTTP APIs that serve JSON results.&lt;/p&gt;

&lt;h2 id=&#34;debugging&#34;&gt;Debugging&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&#34;https://docs.python.org/3/library/pdb.html&#34;&gt;Python debugger &lt;code&gt;pdb&lt;/code&gt;&lt;/a&gt; makes it very easy to debug issues with Python scripts. Simply run the target script using &lt;code&gt;pdb&lt;/code&gt; module rather than directly running it. If an unhandled exception is raised the debugger drops in a debug shell allowing us to run a post-mortem analysis by inspecting state and variables.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ python -m pdb script.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want the debugger to stop at a particular point in execution, simply add the below statement above it in the code.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pdb; pdb.set_trace()
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;performance-analysis&#34;&gt;Performance analysis&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Timing&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;https://docs.python.org/3/library/timeit.html&#34;&gt;timeit&lt;/a&gt; module is an easy way to time a piece of code. The module can run some setup code (import string), and then run test code many (default 10,000,000) times to time execution of the code.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ python -m timeit -s &#39;text = &amp;quot;sample string&amp;quot;; char = &amp;quot;g&amp;quot;&#39;  &#39;char in text&#39;
10000000 loops, best of 3: 0.0408 usec per loop
$ python -m timeit -s &#39;text = &amp;quot;sample string&amp;quot;; char = &amp;quot;g&amp;quot;&#39;  &#39;text.find(char)&#39;
10000000 loops, best of 3: 0.195 usec per loop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Some useful &lt;a href=&#34;https://docs.python.org/3/library/timeit.html#command-line-interface&#34;&gt;command-line options&lt;/a&gt; are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-n&lt;/code&gt; - how many times to repeat the statement (default 10M)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-r&lt;/code&gt; - how many times to repeat the timer (default 3)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-s&lt;/code&gt; - setup statement to be executed once before the test&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Profiling&lt;/strong&gt;
&lt;code&gt;cProfile&lt;/code&gt; module makes it easy to measure the time spent in executing a script and pinpoint the slow bits.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ python cProfile scriptfile [arg] ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A couple of useful flags are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-o&lt;/code&gt; - output file path&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-s&lt;/code&gt; - sort output&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;running-tests-doctests-and-unit-tests&#34;&gt;Running tests - Doctests and Unit tests&lt;/h2&gt;

&lt;p&gt;Python &lt;a href=&#34;https://docs.python.org/3/library/doctest.html#module-doctest&#34;&gt;doctests&lt;/a&gt; can be run from the command-line using the doctest executable module.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ python -m doctest -v example.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Similarly Unit tests can executed using the &lt;a href=&#34;https://docs.python.org/3/library/unittest.html#command-line-interface&#34;&gt;unittest&lt;/a&gt; module&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ python3 -m unittest
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This very useful command-line tool will scan the current directory and sub-modules to discover tests and run them. We can also run specific modules or functions by specifying them. Look at the various options &lt;a href=&#34;https://docs.python.org/3/library/unittest.html#command-line-interface&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;working-with-archives&#34;&gt;Working with archives&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Creating and opening Zip and TAR archive files&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In case you don&amp;rsquo;t have &lt;code&gt;tar&lt;/code&gt; or &lt;code&gt;Zip&lt;/code&gt; tools handy, in Python 3 &lt;a href=&#34;https://docs.python.org/3/library/tarfile.html#command-line-interface&#34;&gt;tarfile&lt;/a&gt; and &lt;a href=&#34;https://docs.python.org/3/library/zipfile.html#command-line-interface&#34;&gt;zipfile&lt;/a&gt; modules allow us to bundle directories into archives and open existing ones.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Create a new TAR archive
$ python3 -m tarfile -c &amp;lt;tarname&amp;gt;.tgz &amp;lt;file&amp;gt; &amp;lt;file&amp;gt;

# Extract from an existing TAR archive
$ python3 -m tarfile -e &amp;lt;tarname&amp;gt;.tgz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Making executable Zip files&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In Python 3, the &lt;a href=&#34;https://docs.python.org/3/library/zipapp.html#command-line-interface&#34;&gt;zipapp&lt;/a&gt; module also allows us to pack up a directory into an archive, and makes it executable. When run, the archive will execute the &lt;code&gt;main&lt;/code&gt; function in the &lt;code&gt;myapp&lt;/code&gt; module.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ python3 -m zipapp myapp
$ python3 myapp.pyz
&amp;lt;output from myapp&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;other-useful-and-interesting-modules&#34;&gt;Other useful and interesting modules&lt;/h2&gt;

&lt;h3 id=&#34;opening-a-web-page-in-a-browser-locally&#34;&gt;Opening a web page in a Browser locally&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;https://docs.python.org/3/library/webbrowser.html#module-webbrowser&#34;&gt;webbrowser&lt;/a&gt; module has a programatic as well as command-line interface.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ python -m webbrowser -t http://www.yahoo.com
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;base64-encoding-and-decoding&#34;&gt;Base64 encoding and decoding&lt;/h3&gt;

&lt;p&gt;When working with a REST APIs, especially where authentication tokens are involved, use of Base64 encoding is quite common. Python &lt;a href=&#34;https://docs.python.org/3/library/base64.html#module-base64&#34;&gt;&lt;code&gt;base64&lt;/code&gt;&lt;/a&gt; module can be used from the command-line a tool in the shell as well.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ python -m base64 -e
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;calendar&#34;&gt;Calendar&lt;/h3&gt;

&lt;p&gt;Did you know that Python comes with an in-built text calendar? The &lt;a href=&#34;https://docs.python.org/3/library/calendar.html&#34;&gt;calendar&lt;/a&gt; module is executable and can take many parameters that allow for customised display.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ python -m calendar
                                  2017

      January                   February                   March
Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su
                   1             1  2  3  4  5             1  2  3  4  5
 2  3  4  5  6  7  8       6  7  8  9 10 11 12       6  7  8  9 10 11 12
 9 10 11 12 13 14 15      13 14 15 16 17 18 19      13 14 15 16 17 18 19
16 17 18 19 20 21 22      20 21 22 23 24 25 26      20 21 22 23 24 25 26
23 24 25 26 27 28 29      27 28                     27 28 29 30 31
30 31

       April                      May                       June
Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su
                1  2       1  2  3  4  5  6  7                1  2  3  4
 3  4  5  6  7  8  9       8  9 10 11 12 13 14       5  6  7  8  9 10 11
10 11 12 13 14 15 16      15 16 17 18 19 20 21      12 13 14 15 16 17 18
17 18 19 20 21 22 23      22 23 24 25 26 27 28      19 20 21 22 23 24 25
24 25 26 27 28 29 30      29 30 31                  26 27 28 29 30

        July                     August                  September
Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su
                1  2          1  2  3  4  5  6                   1  2  3
 3  4  5  6  7  8  9       7  8  9 10 11 12 13       4  5  6  7  8  9 10
10 11 12 13 14 15 16      14 15 16 17 18 19 20      11 12 13 14 15 16 17
17 18 19 20 21 22 23      21 22 23 24 25 26 27      18 19 20 21 22 23 24
24 25 26 27 28 29 30      28 29 30 31               25 26 27 28 29 30
31

      October                   November                  December
Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su
                   1             1  2  3  4  5                   1  2  3
 2  3  4  5  6  7  8       6  7  8  9 10 11 12       4  5  6  7  8  9 10
 9 10 11 12 13 14 15      13 14 15 16 17 18 19      11 12 13 14 15 16 17
16 17 18 19 20 21 22      20 21 22 23 24 25 26      18 19 20 21 22 23 24
23 24 25 26 27 28 29      27 28 29 30               25 26 27 28 29 30 31
30 31
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;print-system-configuration&#34;&gt;Print system configuration&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.python.org/3/library/sysconfig.html#using-sysconfig-as-a-script&#34;&gt;Sysconfig&lt;/a&gt; module allows you to print the detailed system configuration including environment variables which might be useful for debugging purposes.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ python -m sysconfig
Platform: &amp;quot;macosx-10.6-intel&amp;quot;
Python version: &amp;quot;3.6&amp;quot;
Current installation scheme: &amp;quot;posix_prefix&amp;quot;

Paths:
    data = &amp;quot;/Library/Frameworks/Python.framework/Versions/3.6&amp;quot;
    include = &amp;quot;/Library/Frameworks/Python.framework/Versions/3.6/include/python3.6m&amp;quot;
    platinclude = &amp;quot;/Library/Frameworks/Python.framework/Versions/3.6/include/python3.6m&amp;quot;
    platlib = &amp;quot;/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages&amp;quot;
    platstdlib = &amp;quot;/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6&amp;quot;
    purelib = &amp;quot;/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages&amp;quot;
    scripts = &amp;quot;/Library/Frameworks/Python.framework/Versions/3.6/bin&amp;quot;
    stdlib = &amp;quot;/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6&amp;quot;

Variables:
    ABIFLAGS = &amp;quot;m&amp;quot;
    AC_APPLE_UNIVERSAL_BUILD = &amp;quot;1&amp;quot;
    AIX_GENUINE_CPLUSPLUS = &amp;quot;0&amp;quot;
    ANDROID_API_LEVEL = &amp;quot;0&amp;quot;
    ...
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Python in the real world: Context Managers</title>
      <link>http://arnavk.com/posts/python-context-managers/</link>
      <pubDate>Sat, 20 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>http://arnavk.com/posts/python-context-managers/</guid>
      <description>

&lt;p&gt;Context Managers are one of the core language features that make Python unique. The &lt;code&gt;with&lt;/code&gt; statement allows developers to write a common programming pattern in a concise and readable way. The following indented block gives a visual cue and make understanding the code easier. Understanding Context Managers is key to understanding the idea of &lt;em&gt;Pythonic&lt;/em&gt; code.&lt;/p&gt;

&lt;p&gt;Context Managers are usually used for allocation and releasing of resources, but that is not their only use-case. They are useful for factoring out common setup and teardown code, or any pair of operations that need to be performed before or after a procedure.&lt;/p&gt;

&lt;p&gt;In this article, I will present some interesting real-world examples of their use, and hopefully encourage budding Pythonistas to explore them.&lt;/p&gt;

&lt;h2 id=&#34;context-managers-in-summary&#34;&gt;Context Managers in summary&lt;/h2&gt;

&lt;p&gt;In simple terms, Context Managers make writing &lt;strong&gt;try-finally&lt;/strong&gt; blocks easier.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# In Python, code with common setup and teardown:

setup()
try:
    do_work()
finally:
    teardown()

# can be translated roughly to:

cm = ContextManager()
obj = cm.__enter__()
try:
    do_work(obj)    # use obj as needed (see examples below)
finally:
    cm.__exit__()

# this can be written more succinctly using the `with` statement:

with ContextManager() as obj:
    do_work()

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The expression following the &lt;code&gt;with&lt;/code&gt; keyword should return an object that follows the Context Manager protocol. This can be a class instantiation or a function call that returns the Context Manager object.&lt;/p&gt;

&lt;p&gt;The object returned must follow the &lt;strong&gt;Context Manager protocol&lt;/strong&gt; which specifies two special methods, &lt;code&gt;__enter__&lt;/code&gt; and &lt;code&gt;__exit__&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Some important points to remember are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__enter__&lt;/code&gt; should return an object that is assigned to the variable after &lt;code&gt;as&lt;/code&gt;. By default it is &lt;code&gt;None&lt;/code&gt;, and is optional. A common pattern is to return &lt;code&gt;self&lt;/code&gt; and keep the functionality required within the same class.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__exit__&lt;/code&gt; is called on the original Context Manager object, not the object returned by &lt;code&gt;__enter__&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If an error is raised in &lt;code&gt;__init__&lt;/code&gt; or &lt;code&gt;__enter__&lt;/code&gt; then the code block is never executed and &lt;code&gt;__exit__&lt;/code&gt; is not called.&lt;/li&gt;
&lt;li&gt;Once the code block is entered, &lt;code&gt;__exit__&lt;/code&gt; is always called, even if an exception is raised in the code block.&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;__exit__&lt;/code&gt; returns &lt;code&gt;True&lt;/code&gt;, the exception is suppressed.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class CManager(object):
    def __init__(self):
        print &#39;__init__&#39;
    
    def __enter__(self):
        print &#39;__enter__&#39;
        return self
    
    def __exit__(self, type, value, traceback):
        print &#39;__exit__:&#39;, type, value
        return True  # Suppress this exception

    def __del__(self):
        print &#39;__del__&#39;, self

with CManager() as c:
    print &#39;doing something with c:&#39;, c
    raise RuntimeError()
    print &#39;finished doing something&#39;
print &#39;done something&#39;

&amp;quot;&amp;quot;&amp;quot;
# outputs:
__init__
__enter__
doing something with c: &amp;lt;__main__.CManager object at 0x103fd8ed0&amp;gt;
__exit__: &amp;lt;type &#39;exceptions.RuntimeError&#39;&amp;gt; 
done something
&amp;quot;&amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Simple context managers can also be written using Generators and the &lt;code&gt;contextmanager&lt;/code&gt; decorator:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from contextlib import contextmanager

@contextmanager
def context_manager_func():
    setup()

    # yield must be wrapped in try/finally
    # to trap any exceptions raised in the calling code
    try:
        yield
    finally:
        teardown()
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;reliable-destructors&#34;&gt;Reliable destructors&lt;/h2&gt;

&lt;p&gt;Context Managers give us a reliable method to clean up resources. Unlike other OO languages like C++ and Java, the Python destructor method &lt;code&gt;__del__&lt;/code&gt; is not always guaranteed to be called. It is only called when the reference count to the object reaches zero. This might happen at the end of the current function, or at the end of the program, or never in case of circular references.&lt;/p&gt;

&lt;p&gt;Up until Python 3.4, if all objects in a reference cycle have &lt;code&gt;__del__&lt;/code&gt; method, Python would not call it, and garbage collect the objects. This is because Python has no safe way of knowing which order to destroy these objects in.&lt;/p&gt;

&lt;p&gt;Starting from Python 3.4, cycles with &lt;code&gt;__del__&lt;/code&gt; objects &lt;a href=&#34;https://www.python.org/dev/peps/pep-0442/&#34;&gt;can now be garbage collected&lt;/a&gt;. The order in which they are call is undefined though.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s look at a few examples of Context Managers in the real world. Experienced Python developers would have seen many of these examples, but maybe some of them are new.&lt;/p&gt;

&lt;h2 id=&#34;making-sure-an-open-stream-is-closed-at-the-end&#34;&gt;Making sure an open stream is closed at the end&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;open()&lt;/code&gt; function is is the canonical example of context managers. It provides an open file handle which will be closed at the end of the block.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;with open(path, mode) as f:
    f.read()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;StringIO&lt;/code&gt; objects behave in the same way:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;with io.StringIO() as b:
     b.write(‘foo’)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;closing&lt;/code&gt; context manager calls &lt;code&gt;close()&lt;/code&gt; on any object if the method exists.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from contextlib import closing
with closing(urllib.urlopen(&#39;http://google.com&#39;)) as page:
    page.readlines()
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;making-sure-an-exception-is-raised-in-testing&#34;&gt;Making sure an exception is raised in testing&lt;/h2&gt;

&lt;p&gt;In unittest (2.7+):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def test_split(self):
    with self.assertRaises(TypeError):
        &#39;hello world&#39;.split(2)

    with self.assertRaisesRegexp(TypeError, &#39;expected a string.*object$&#39;):
        &#39;hello world&#39;.split(2)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;E.g. in Pytest&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;with pytest.raises(ValueError):
    int(&#39;hello&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;setting-up-mocks-before-testing&#34;&gt;Setting up mocks before testing&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;with mock.patch(&#39;a.b&#39;):
    call()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;mock.patch&lt;/code&gt; is an example of a &lt;a href=&#34;https://docs.python.org/3.5/library/contextlib.html#using-a-context-manager-as-a-function-decorator&#34;&gt;context manager that can also be used as a decorator&lt;/a&gt;. Python 3 comes with a utility &lt;a href=&#34;https://docs.python.org/3.5/library/contextlib.html#contextlib.ContextDecorator&#34;&gt;ContextDecorator&lt;/a&gt; that makes it easy to write such context manager-decorators.&lt;/p&gt;

&lt;p&gt;When used as a decorator, &lt;code&gt;mock.patch&lt;/code&gt; passes the newly created mock object (return value of &lt;code&gt;__enter__&lt;/code&gt;) into the decorated function. ContextDecorator in Python 3, on the other hand, does not give you access to the return value of &lt;code&gt;__enter__&lt;/code&gt; method.&lt;/p&gt;

&lt;h2 id=&#34;synchronising-access-to-shared-resources&#34;&gt;Synchronising access to shared resources&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;with threading.RLock():
    access_resource()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The with statement in this case, calls &lt;code&gt;lock.acquire()&lt;/code&gt; at entry and &lt;code&gt;lock.release()&lt;/code&gt; on exit.&lt;/p&gt;

&lt;p&gt;Locks are types of &lt;a href=&#34;https://docs.python.org/3.5/library/contextlib.html#reentrant-context-managers&#34;&gt;Reentrant context managers&lt;/a&gt; which allow you to re-enter the same context manager many times and also reuse it.&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;threading&lt;/code&gt; module, Lock, RLock, Condition, Semaphore, BoundedSemaphore can be used as context managers.&lt;/p&gt;

&lt;p&gt;A similar idea can be used for locking files while accessing them. For e.g. the &lt;a href=&#34;https://code.activestate.com/recipes/577911/&#34;&gt;pidfile context manager&lt;/a&gt; uses &lt;code&gt;fcntl.flock()&lt;/code&gt; to obtain a file lock on a daemon pidfile.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import fcntl, csv, sys

class open_locked:
    def __init__(self, *args, **kwargs):
        self.fd = open(*args, **kwargs)

    def __enter__(self):
        fcntl.flock(self.fd, fcntl.LOCK_EX)
        return self.fd.__enter__()

    def __exit__(self, type, value, traceback):
        fcntl.flock(self.fd, fcntl.LOCK_UN)
        return self.fd.__exit__()


with open_locked(&#39;data.csv&#39;, &#39;w&#39;) as outf:
    writer = csv.writer(outf)
    writer.writerows(someiterable)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;setting-up-the-python-execution-environment&#34;&gt;Setting up the Python execution environment&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;with decimal.localcontext() as ctx:
    # setup high precision operations within this thread
    ctx.prec = 42       
    math_operations()
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;managing-database-connections-and-transactions&#34;&gt;Managing database connections and transactions&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;conn = sqlite3.connect(&#39;:memory:&#39;)
with conn:
    # start a new db transaction
    conn.execute(&#39;create table mytable (id int primary key, name char(50))&#39;)
    conn.execute(&#39;insert into mytable(id) values (?)&#39;, (1, &#39;avni&#39;))
    # if there was an error, table would not be created in database 
    # as whole transaction is rolled back
    ...
# conn.commit() called.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;wrapping-remote-connections-over-a-protocol&#34;&gt;Wrapping remote connections over a protocol:&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class SomeProtocol:
     def __init__(self, host, port):
          self.host, self.port = host, port
     def __enter__(self):
          self._client = socket()
          self._client.connect((self.host, self.port))
          return self
     def __exit__(self, exception, value, traceback):
          self._client.close()
     def send(self, payload): ...
     def receive(self): ...

with SomeProtocol(host, port) as protocol:
     protocol.send([&#39;get&#39;, signal])
     result = protocol.receive()
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;timing-the-execution-of-a-code-block&#34;&gt;Timing the execution of a code block&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import time

class Timer:
    def __init__(self, name):
        self.name = name

    def __enter__(self):
        self.start = time.time()

    def __exit__(self, *args):
        self.end = time.time()
        self.interval = self.end - self.start
        print(&amp;quot;%s took: %0.3f seconds&amp;quot; % (self.name, self.interval))
        return False
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; with Timer(&#39;fetching google homepage&#39;):
...     conn = httplib.HTTPConnection(&#39;google.com&#39;)
...     conn.request(&#39;GET&#39;, &#39;/&#39;)
... 
fetching google homepage took: 0.047 seconds
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;automating-remote-server-tasks-using-fabric&#34;&gt;Automating remote server tasks using Fabric&lt;/h2&gt;

&lt;p&gt;Fabric provides many interesting &lt;a href=&#34;http://docs.fabfile.org/en/latest/api/core/context_managers.html&#34;&gt;context managers&lt;/a&gt; to help automate deployment and other local and remote tasks.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# In Python 2.7+ multilple context managers can be combined using commas
# In Python 2.6, `contextlib.nested` can be used for the same purpose

with cd(&#39;/path/to/app&#39;), prefix(&#39;workon myvenv&#39;):
    run(&#39;./manage.py syncdb&#39;)
    run(&#39;./manage.py loaddata myfixture&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;create-and-use-a-temporary-file-and-delete-at-the-end&#34;&gt;Create and use a temporary file and delete at the end&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import tempfile

with tempfile.NamedTemporaryFile() as tf:
    print(&#39;Writing to tempfile:&#39;, tf.name)
    tf.write(&#39;Some data&#39;)
    tf.flush()

# By default the temporary file created is deleted when file is closed
# Pass `delete=False` to NamedTemporaryFile to disable auto-delete.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;redirecting-input-and-output-streams&#34;&gt;Redirecting input and output streams&lt;/h2&gt;

&lt;p&gt;In Python 3.4+, the &lt;a href=&#34;https://docs.python.org/3/library/contextlib.html?highlight=contextlib#contextlib.redirect_stdout&#34;&gt;&lt;code&gt;redirect_stdout&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://docs.python.org/3/library/contextlib.html?highlight=contextlib#contextlib.redirect_stderr&#34;&gt;&lt;code&gt;redirect_stderr&lt;/code&gt;&lt;/a&gt; context manager can be used to temporarily redirect &lt;code&gt;stdout&lt;/code&gt; and &lt;code&gt;stderr&lt;/code&gt; streams.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;with open(&#39;output.txt&#39;, &#39;w&#39;) as f:
    with redirect_stdout(f):
        print(&#39;Hello World!&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;redirect_stdout&lt;/code&gt; only redirects stdout calls from Python, but not from C library code. See this &lt;a href=&#34;http://eli.thegreenplace.net/2015/redirecting-all-kinds-of-stdout-in-python/&#34;&gt;blog post by Eli Bendersky&lt;/a&gt; on how to redirect all streams.&lt;/p&gt;

&lt;h2 id=&#34;reading-and-writing-to-a-file-in-place&#34;&gt;Reading and writing to a file in-place&lt;/h2&gt;

&lt;p&gt;See &lt;a href=&#34;http://www.zopatista.com/python/2013/11/26/inplace-file-rewriting/&#34;&gt;this example by Martijn Pieters&lt;/a&gt; of a context manager that allow you to update the same file while reading it line-by-line.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import csv

with inplace(csvfilename, &#39;rb&#39;) as (infh, outfh):
    reader = csv.reader(infh)
    writer = csv.writer(outfh)

    for row in reader:
        row += [&#39;new&#39;, &#39;columns&#39;]
        writer.writerow(row)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;managing-a-pool-of-processes&#34;&gt;Managing a pool of processes&lt;/h2&gt;

&lt;p&gt;Python&amp;rsquo;s &lt;code&gt;multiprocessing&lt;/code&gt; library provides a bunch of context managers to manage connections, &lt;a href=&#34;https://docs.python.org/3/library/multiprocessing.html?highlight=multiprocessing#module-multiprocessing.pool&#34;&gt;pools&lt;/a&gt; and OS-level resource locks.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from multiprocessing import Pool

def f(x):
    return x*x

with Pool(processes=4) as pool:  # start 4 worker processes

    # evaluate &amp;quot;f(10)&amp;quot; asynchronously in a single process
    result = pool.apply_async(f, (10,)) 
    print(result.get(timeout=1)) 
    # prints &amp;quot;100&amp;quot;

    print(pool.map(f, range(10)))       
    # prints &amp;quot;[0, 1, 4,..., 81]&amp;quot;

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;So in short, Context Managers can be used in a great variety of cases. Start using them now whenever you see the &amp;ldquo;setup-teardown&amp;rdquo; pattern, to write your Python code in a more Pythonic way.&lt;/p&gt;

&lt;p&gt;In future posts, we will explore Decorators and Metaclasses through examples of use as well.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
