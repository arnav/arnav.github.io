<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on Arnav Khare</title>
    <link>http://arnavk.org/tags/python/</link>
    <description>Recent content in python on Arnav Khare</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 15 Oct 2017 00:00:00 +0000</lastBuildDate><atom:link href="http://arnavk.org/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Useful Executable Modules in the Python Standard Library</title>
      <link>http://arnavk.org/posts/python-executable-modules/</link>
      <pubDate>Sun, 15 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>http://arnavk.org/posts/python-executable-modules/</guid>
      <description>Python comes with many handy tools that can make our lives as developers or sysadmins easier. These tools are in the form of modules and libraries that are also executable. Many of these tools are known, but not all are as well known as they should be. I will mention a few useful tools that I have found in this post.
How to write an executable Python script First, for beginners, a quick introduction to how to write executable scripts in Python.</description>
    </item>
    
    <item>
      <title>Python in the real world: Context Managers</title>
      <link>http://arnavk.org/posts/python-context-managers/</link>
      <pubDate>Sat, 20 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>http://arnavk.org/posts/python-context-managers/</guid>
      <description>&lt;p&gt;Context Managers are one of the core language features that make Python unique. The &lt;code&gt;with&lt;/code&gt; statement allows developers to write a common programming pattern in a concise and readable way. The following indented block gives a visual cue and make understanding the code easier. Understanding Context Managers is key to understanding the idea of &lt;em&gt;Pythonic&lt;/em&gt; code.&lt;/p&gt;
&lt;p&gt;Context Managers are usually used for allocation and releasing of resources, but that is not their only use-case. They are useful for factoring out common setup and teardown code, or any pair of operations that need to be performed before or after a procedure.&lt;/p&gt;
&lt;p&gt;In this article, I will present some interesting real-world examples of their use, and hopefully encourage budding Pythonistas to explore them.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
